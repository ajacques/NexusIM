//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace SilverlightContactMap.NexusCore {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserLocationData", Namespace="http://schemas.datacontract.org/2004/07/NexusCore.DataContracts")]
    public partial class UserLocationData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int AccuracyField;
        
        private System.DateTime LastUpdatedField;
        
        private double LatitudeField;
        
        private double LongitudeField;
        
        private string ReverseGeocodeField;
        
        private int RowIdField;
        
        private SilverlightContactMap.NexusCore.LocationServiceType ServiceTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Accuracy {
            get {
                return this.AccuracyField;
            }
            set {
                if ((this.AccuracyField.Equals(value) != true)) {
                    this.AccuracyField = value;
                    this.RaisePropertyChanged("Accuracy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdated {
            get {
                return this.LastUpdatedField;
            }
            set {
                if ((this.LastUpdatedField.Equals(value) != true)) {
                    this.LastUpdatedField = value;
                    this.RaisePropertyChanged("LastUpdated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReverseGeocode {
            get {
                return this.ReverseGeocodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ReverseGeocodeField, value) != true)) {
                    this.ReverseGeocodeField = value;
                    this.RaisePropertyChanged("ReverseGeocode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RowId {
            get {
                return this.RowIdField;
            }
            set {
                if ((this.RowIdField.Equals(value) != true)) {
                    this.RowIdField = value;
                    this.RaisePropertyChanged("RowId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverlightContactMap.NexusCore.LocationServiceType ServiceType {
            get {
                return this.ServiceTypeField;
            }
            set {
                if ((this.ServiceTypeField.Equals(value) != true)) {
                    this.ServiceTypeField = value;
                    this.RaisePropertyChanged("ServiceType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocationServiceType", Namespace="http://schemas.datacontract.org/2004/07/NexusCore.DataContracts")]
    public enum LocationServiceType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GoogleLatitude = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FireEagle = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContactLocationInfo", Namespace="http://schemas.datacontract.org/2004/07/NexusCore.DataContracts")]
    public partial class ContactLocationInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private SilverlightContactMap.NexusCore.AccountInfo AccountInfoField;
        
        private int LocationIdField;
        
        private bool MessagableField;
        
        private SilverlightContactMap.NexusCore.LocationServiceType ServiceTypeField;
        
        private string UsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverlightContactMap.NexusCore.AccountInfo AccountInfo {
            get {
                return this.AccountInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountInfoField, value) != true)) {
                    this.AccountInfoField = value;
                    this.RaisePropertyChanged("AccountInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LocationId {
            get {
                return this.LocationIdField;
            }
            set {
                if ((this.LocationIdField.Equals(value) != true)) {
                    this.LocationIdField = value;
                    this.RaisePropertyChanged("LocationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Messagable {
            get {
                return this.MessagableField;
            }
            set {
                if ((this.MessagableField.Equals(value) != true)) {
                    this.MessagableField = value;
                    this.RaisePropertyChanged("Messagable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverlightContactMap.NexusCore.LocationServiceType ServiceType {
            get {
                return this.ServiceTypeField;
            }
            set {
                if ((this.ServiceTypeField.Equals(value) != true)) {
                    this.ServiceTypeField = value;
                    this.RaisePropertyChanged("ServiceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountInfo", Namespace="com.adrensoftware.nexus")]
    public partial class AccountInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int AccountIdField;
        
        private bool EnabledField;
        
        private System.Guid GuidField;
        
        private string PasswordField;
        
        private string ProtocolTypeField;
        
        private string ServerField;
        
        private string UsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccountId {
            get {
                return this.AccountIdField;
            }
            set {
                if ((this.AccountIdField.Equals(value) != true)) {
                    this.AccountIdField = value;
                    this.RaisePropertyChanged("AccountId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Guid {
            get {
                return this.GuidField;
            }
            set {
                if ((this.GuidField.Equals(value) != true)) {
                    this.GuidField = value;
                    this.RaisePropertyChanged("Guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtocolType {
            get {
                return this.ProtocolTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtocolTypeField, value) != true)) {
                    this.ProtocolTypeField = value;
                    this.RaisePropertyChanged("ProtocolType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Server {
            get {
                return this.ServerField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerField, value) != true)) {
                    this.ServerField = value;
                    this.RaisePropertyChanged("Server");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyAccountInformation", Namespace="http://schemas.datacontract.org/2004/07/NexusCore.DataContracts")]
    public partial class MyAccountInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string mFirstNameField;
        
        private string mUsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string mFirstName {
            get {
                return this.mFirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.mFirstNameField, value) != true)) {
                    this.mFirstNameField = value;
                    this.RaisePropertyChanged("mFirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string mUsername {
            get {
                return this.mUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.mUsernameField, value) != true)) {
                    this.mUsernameField = value;
                    this.RaisePropertyChanged("mUsername");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="NexusCore.JSCoreService")]
    public interface JSCoreService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:JSCoreService/Logout", ReplyAction="urn:JSCoreService/LogoutResponse")]
        System.IAsyncResult BeginLogout(System.AsyncCallback callback, object asyncState);
        
        void EndLogout(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:JSCoreService/GetLocation", ReplyAction="urn:JSCoreService/GetLocationResponse")]
        System.IAsyncResult BeginGetLocation(int rowId, System.AsyncCallback callback, object asyncState);
        
        SilverlightContactMap.NexusCore.UserLocationData EndGetLocation(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface JSCoreServiceChannel : SilverlightContactMap.NexusCore.JSCoreService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightContactMap.NexusCore.UserLocationData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightContactMap.NexusCore.UserLocationData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JSCoreServiceClient : System.ServiceModel.ClientBase<SilverlightContactMap.NexusCore.JSCoreService>, SilverlightContactMap.NexusCore.JSCoreService {
        
        private BeginOperationDelegate onBeginLogoutDelegate;
        
        private EndOperationDelegate onEndLogoutDelegate;
        
        private System.Threading.SendOrPostCallback onLogoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLocationDelegate;
        
        private EndOperationDelegate onEndGetLocationDelegate;
        
        private System.Threading.SendOrPostCallback onGetLocationCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public JSCoreServiceClient() {
        }
        
        public JSCoreServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public JSCoreServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JSCoreServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JSCoreServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogoutCompleted;
        
        public event System.EventHandler<GetLocationCompletedEventArgs> GetLocationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightContactMap.NexusCore.JSCoreService.BeginLogout(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogout(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SilverlightContactMap.NexusCore.JSCoreService.EndLogout(System.IAsyncResult result) {
            base.Channel.EndLogout(result);
        }
        
        private System.IAsyncResult OnBeginLogout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightContactMap.NexusCore.JSCoreService)(this)).BeginLogout(callback, asyncState);
        }
        
        private object[] OnEndLogout(System.IAsyncResult result) {
            ((SilverlightContactMap.NexusCore.JSCoreService)(this)).EndLogout(result);
            return null;
        }
        
        private void OnLogoutCompleted(object state) {
            if ((this.LogoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogoutAsync() {
            this.LogoutAsync(null);
        }
        
        public void LogoutAsync(object userState) {
            if ((this.onBeginLogoutDelegate == null)) {
                this.onBeginLogoutDelegate = new BeginOperationDelegate(this.OnBeginLogout);
            }
            if ((this.onEndLogoutDelegate == null)) {
                this.onEndLogoutDelegate = new EndOperationDelegate(this.OnEndLogout);
            }
            if ((this.onLogoutCompletedDelegate == null)) {
                this.onLogoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogoutCompleted);
            }
            base.InvokeAsync(this.onBeginLogoutDelegate, null, this.onEndLogoutDelegate, this.onLogoutCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightContactMap.NexusCore.JSCoreService.BeginGetLocation(int rowId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLocation(rowId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightContactMap.NexusCore.UserLocationData SilverlightContactMap.NexusCore.JSCoreService.EndGetLocation(System.IAsyncResult result) {
            return base.Channel.EndGetLocation(result);
        }
        
        private System.IAsyncResult OnBeginGetLocation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int rowId = ((int)(inValues[0]));
            return ((SilverlightContactMap.NexusCore.JSCoreService)(this)).BeginGetLocation(rowId, callback, asyncState);
        }
        
        private object[] OnEndGetLocation(System.IAsyncResult result) {
            SilverlightContactMap.NexusCore.UserLocationData retVal = ((SilverlightContactMap.NexusCore.JSCoreService)(this)).EndGetLocation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLocationCompleted(object state) {
            if ((this.GetLocationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLocationCompleted(this, new GetLocationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLocationAsync(int rowId) {
            this.GetLocationAsync(rowId, null);
        }
        
        public void GetLocationAsync(int rowId, object userState) {
            if ((this.onBeginGetLocationDelegate == null)) {
                this.onBeginGetLocationDelegate = new BeginOperationDelegate(this.OnBeginGetLocation);
            }
            if ((this.onEndGetLocationDelegate == null)) {
                this.onEndGetLocationDelegate = new EndOperationDelegate(this.OnEndGetLocation);
            }
            if ((this.onGetLocationCompletedDelegate == null)) {
                this.onGetLocationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLocationCompleted);
            }
            base.InvokeAsync(this.onBeginGetLocationDelegate, new object[] {
                        rowId}, this.onEndGetLocationDelegate, this.onGetLocationCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightContactMap.NexusCore.JSCoreService CreateChannel() {
            return new JSCoreServiceClientChannel(this);
        }
        
        private class JSCoreServiceClientChannel : ChannelBase<SilverlightContactMap.NexusCore.JSCoreService>, SilverlightContactMap.NexusCore.JSCoreService {
            
            public JSCoreServiceClientChannel(System.ServiceModel.ClientBase<SilverlightContactMap.NexusCore.JSCoreService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginLogout(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Logout", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLogout(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Logout", _args, result);
            }
            
            public System.IAsyncResult BeginGetLocation(int rowId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = rowId;
                System.IAsyncResult _result = base.BeginInvoke("GetLocation", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightContactMap.NexusCore.UserLocationData EndGetLocation(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightContactMap.NexusCore.UserLocationData _result = ((SilverlightContactMap.NexusCore.UserLocationData)(base.EndInvoke("GetLocation", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Name="CoreService", Namespace="com.nexusim.core", ConfigurationName="NexusCore.CoreService")]
    public interface CoreService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:JSCoreService/Logout", ReplyAction="urn:JSCoreService/LogoutResponse")]
        System.IAsyncResult BeginLogout(SilverlightContactMap.NexusCore.LogoutRequest request, System.AsyncCallback callback, object asyncState);
        
        SilverlightContactMap.NexusCore.LogoutResponse EndLogout(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:JSCoreService/GetLocation", ReplyAction="urn:JSCoreService/GetLocationResponse")]
        System.IAsyncResult BeginGetLocation(SilverlightContactMap.NexusCore.GetLocationRequest request, System.AsyncCallback callback, object asyncState);
        
        SilverlightContactMap.NexusCore.GetLocationResponse EndGetLocation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="com.nexusim.core/CoreService/Login", ReplyAction="com.nexusim.core/CoreService/LoginResponse")]
        System.IAsyncResult BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState);
        
        void EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="com.nexusim.core/CoreService/CookieLogin", ReplyAction="com.nexusim.core/CoreService/CookieLoginResponse")]
        System.IAsyncResult BeginCookieLogin(string username, string password, System.AsyncCallback callback, object asyncState);
        
        string EndCookieLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="com.nexusim.core/CoreService/LoginWithToken", ReplyAction="com.nexusim.core/CoreService/LoginWithTokenResponse")]
        System.IAsyncResult BeginLoginWithToken(string token, System.AsyncCallback callback, object asyncState);
        
        void EndLoginWithToken(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="com.nexusim.core/CoreService/GetLocationData", ReplyAction="com.nexusim.core/CoreService/GetLocationDataResponse")]
        System.IAsyncResult BeginGetLocationData(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<SilverlightContactMap.NexusCore.ContactLocationInfo> EndGetLocationData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="com.nexusim.core/CoreService/GetMultipleLocations", ReplyAction="com.nexusim.core/CoreService/GetMultipleLocationsResponse")]
        System.IAsyncResult BeginGetMultipleLocations(System.Collections.Generic.List<int> rowIds, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<SilverlightContactMap.NexusCore.UserLocationData> EndGetMultipleLocations(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="com.nexusim.core/CoreService/GetAccounts", ReplyAction="com.nexusim.core/CoreService/GetAccountsResponse")]
        System.IAsyncResult BeginGetAccounts(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<SilverlightContactMap.NexusCore.AccountInfo> EndGetAccounts(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="com.nexusim.core/CoreService/GetMyAccountInfo", ReplyAction="com.nexusim.core/CoreService/GetMyAccountInfoResponse")]
        System.IAsyncResult BeginGetMyAccountInfo(System.AsyncCallback callback, object asyncState);
        
        SilverlightContactMap.NexusCore.MyAccountInformation EndGetMyAccountInfo(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Logout", WrapperNamespace="", IsWrapped=true)]
    public partial class LogoutRequest {
        
        public LogoutRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LogoutResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class LogoutResponse {
        
        public LogoutResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLocation", WrapperNamespace="", IsWrapped=true)]
    public partial class GetLocationRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public int rowId;
        
        public GetLocationRequest() {
        }
        
        public GetLocationRequest(int rowId) {
            this.rowId = rowId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLocationResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class GetLocationResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public SilverlightContactMap.NexusCore.UserLocationData GetLocationResult;
        
        public GetLocationResponse() {
        }
        
        public GetLocationResponse(SilverlightContactMap.NexusCore.UserLocationData GetLocationResult) {
            this.GetLocationResult = GetLocationResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CoreServiceChannel : SilverlightContactMap.NexusCore.CoreService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLocationCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLocationCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightContactMap.NexusCore.UserLocationData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightContactMap.NexusCore.UserLocationData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CookieLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CookieLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLocationDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLocationDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<SilverlightContactMap.NexusCore.ContactLocationInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<SilverlightContactMap.NexusCore.ContactLocationInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMultipleLocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMultipleLocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<SilverlightContactMap.NexusCore.UserLocationData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<SilverlightContactMap.NexusCore.UserLocationData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<SilverlightContactMap.NexusCore.AccountInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<SilverlightContactMap.NexusCore.AccountInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMyAccountInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMyAccountInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightContactMap.NexusCore.MyAccountInformation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightContactMap.NexusCore.MyAccountInformation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CoreServiceClient : System.ServiceModel.ClientBase<SilverlightContactMap.NexusCore.CoreService>, SilverlightContactMap.NexusCore.CoreService {
        
        private BeginOperationDelegate onBeginLogoutDelegate;
        
        private EndOperationDelegate onEndLogoutDelegate;
        
        private System.Threading.SendOrPostCallback onLogoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLocationDelegate;
        
        private EndOperationDelegate onEndGetLocationDelegate;
        
        private System.Threading.SendOrPostCallback onGetLocationCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginCookieLoginDelegate;
        
        private EndOperationDelegate onEndCookieLoginDelegate;
        
        private System.Threading.SendOrPostCallback onCookieLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginWithTokenDelegate;
        
        private EndOperationDelegate onEndLoginWithTokenDelegate;
        
        private System.Threading.SendOrPostCallback onLoginWithTokenCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLocationDataDelegate;
        
        private EndOperationDelegate onEndGetLocationDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetLocationDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMultipleLocationsDelegate;
        
        private EndOperationDelegate onEndGetMultipleLocationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetMultipleLocationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountsDelegate;
        
        private EndOperationDelegate onEndGetAccountsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMyAccountInfoDelegate;
        
        private EndOperationDelegate onEndGetMyAccountInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetMyAccountInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public CoreServiceClient() {
        }
        
        public CoreServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CoreServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CoreServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CoreServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogoutCompleted;
        
        public event System.EventHandler<GetLocationCompletedEventArgs1> GetLocationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<CookieLoginCompletedEventArgs> CookieLoginCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LoginWithTokenCompleted;
        
        public event System.EventHandler<GetLocationDataCompletedEventArgs> GetLocationDataCompleted;
        
        public event System.EventHandler<GetMultipleLocationsCompletedEventArgs> GetMultipleLocationsCompleted;
        
        public event System.EventHandler<GetAccountsCompletedEventArgs> GetAccountsCompleted;
        
        public event System.EventHandler<GetMyAccountInfoCompletedEventArgs> GetMyAccountInfoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightContactMap.NexusCore.CoreService.BeginLogout(SilverlightContactMap.NexusCore.LogoutRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogout(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginLogout(System.AsyncCallback callback, object asyncState) {
            SilverlightContactMap.NexusCore.LogoutRequest inValue = new SilverlightContactMap.NexusCore.LogoutRequest();
            return ((SilverlightContactMap.NexusCore.CoreService)(this)).BeginLogout(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightContactMap.NexusCore.LogoutResponse SilverlightContactMap.NexusCore.CoreService.EndLogout(System.IAsyncResult result) {
            return base.Channel.EndLogout(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private void EndLogout(System.IAsyncResult result) {
            SilverlightContactMap.NexusCore.LogoutResponse retVal = ((SilverlightContactMap.NexusCore.CoreService)(this)).EndLogout(result);
        }
        
        private System.IAsyncResult OnBeginLogout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginLogout(callback, asyncState);
        }
        
        private object[] OnEndLogout(System.IAsyncResult result) {
            this.EndLogout(result);
            return null;
        }
        
        private void OnLogoutCompleted(object state) {
            if ((this.LogoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogoutAsync() {
            this.LogoutAsync(null);
        }
        
        public void LogoutAsync(object userState) {
            if ((this.onBeginLogoutDelegate == null)) {
                this.onBeginLogoutDelegate = new BeginOperationDelegate(this.OnBeginLogout);
            }
            if ((this.onEndLogoutDelegate == null)) {
                this.onEndLogoutDelegate = new EndOperationDelegate(this.OnEndLogout);
            }
            if ((this.onLogoutCompletedDelegate == null)) {
                this.onLogoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogoutCompleted);
            }
            base.InvokeAsync(this.onBeginLogoutDelegate, null, this.onEndLogoutDelegate, this.onLogoutCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightContactMap.NexusCore.CoreService.BeginGetLocation(SilverlightContactMap.NexusCore.GetLocationRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLocation(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetLocation(int rowId, System.AsyncCallback callback, object asyncState) {
            SilverlightContactMap.NexusCore.GetLocationRequest inValue = new SilverlightContactMap.NexusCore.GetLocationRequest();
            inValue.rowId = rowId;
            return ((SilverlightContactMap.NexusCore.CoreService)(this)).BeginGetLocation(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightContactMap.NexusCore.GetLocationResponse SilverlightContactMap.NexusCore.CoreService.EndGetLocation(System.IAsyncResult result) {
            return base.Channel.EndGetLocation(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private SilverlightContactMap.NexusCore.UserLocationData EndGetLocation(System.IAsyncResult result) {
            SilverlightContactMap.NexusCore.GetLocationResponse retVal = ((SilverlightContactMap.NexusCore.CoreService)(this)).EndGetLocation(result);
            return retVal.GetLocationResult;
        }
        
        private System.IAsyncResult OnBeginGetLocation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int rowId = ((int)(inValues[0]));
            return this.BeginGetLocation(rowId, callback, asyncState);
        }
        
        private object[] OnEndGetLocation(System.IAsyncResult result) {
            SilverlightContactMap.NexusCore.UserLocationData retVal = this.EndGetLocation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLocationCompleted(object state) {
            if ((this.GetLocationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLocationCompleted(this, new GetLocationCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLocationAsync(int rowId) {
            this.GetLocationAsync(rowId, null);
        }
        
        public void GetLocationAsync(int rowId, object userState) {
            if ((this.onBeginGetLocationDelegate == null)) {
                this.onBeginGetLocationDelegate = new BeginOperationDelegate(this.OnBeginGetLocation);
            }
            if ((this.onEndGetLocationDelegate == null)) {
                this.onEndGetLocationDelegate = new EndOperationDelegate(this.OnEndGetLocation);
            }
            if ((this.onGetLocationCompletedDelegate == null)) {
                this.onGetLocationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLocationCompleted);
            }
            base.InvokeAsync(this.onBeginGetLocationDelegate, new object[] {
                        rowId}, this.onEndGetLocationDelegate, this.onGetLocationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightContactMap.NexusCore.CoreService.BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SilverlightContactMap.NexusCore.CoreService.EndLogin(System.IAsyncResult result) {
            base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((SilverlightContactMap.NexusCore.CoreService)(this)).BeginLogin(username, password, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            ((SilverlightContactMap.NexusCore.CoreService)(this)).EndLogin(result);
            return null;
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string username, string password) {
            this.LoginAsync(username, password, null);
        }
        
        public void LoginAsync(string username, string password, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        username,
                        password}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightContactMap.NexusCore.CoreService.BeginCookieLogin(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCookieLogin(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SilverlightContactMap.NexusCore.CoreService.EndCookieLogin(System.IAsyncResult result) {
            return base.Channel.EndCookieLogin(result);
        }
        
        private System.IAsyncResult OnBeginCookieLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((SilverlightContactMap.NexusCore.CoreService)(this)).BeginCookieLogin(username, password, callback, asyncState);
        }
        
        private object[] OnEndCookieLogin(System.IAsyncResult result) {
            string retVal = ((SilverlightContactMap.NexusCore.CoreService)(this)).EndCookieLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCookieLoginCompleted(object state) {
            if ((this.CookieLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CookieLoginCompleted(this, new CookieLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CookieLoginAsync(string username, string password) {
            this.CookieLoginAsync(username, password, null);
        }
        
        public void CookieLoginAsync(string username, string password, object userState) {
            if ((this.onBeginCookieLoginDelegate == null)) {
                this.onBeginCookieLoginDelegate = new BeginOperationDelegate(this.OnBeginCookieLogin);
            }
            if ((this.onEndCookieLoginDelegate == null)) {
                this.onEndCookieLoginDelegate = new EndOperationDelegate(this.OnEndCookieLogin);
            }
            if ((this.onCookieLoginCompletedDelegate == null)) {
                this.onCookieLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCookieLoginCompleted);
            }
            base.InvokeAsync(this.onBeginCookieLoginDelegate, new object[] {
                        username,
                        password}, this.onEndCookieLoginDelegate, this.onCookieLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightContactMap.NexusCore.CoreService.BeginLoginWithToken(string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoginWithToken(token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SilverlightContactMap.NexusCore.CoreService.EndLoginWithToken(System.IAsyncResult result) {
            base.Channel.EndLoginWithToken(result);
        }
        
        private System.IAsyncResult OnBeginLoginWithToken(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string token = ((string)(inValues[0]));
            return ((SilverlightContactMap.NexusCore.CoreService)(this)).BeginLoginWithToken(token, callback, asyncState);
        }
        
        private object[] OnEndLoginWithToken(System.IAsyncResult result) {
            ((SilverlightContactMap.NexusCore.CoreService)(this)).EndLoginWithToken(result);
            return null;
        }
        
        private void OnLoginWithTokenCompleted(object state) {
            if ((this.LoginWithTokenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginWithTokenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginWithTokenAsync(string token) {
            this.LoginWithTokenAsync(token, null);
        }
        
        public void LoginWithTokenAsync(string token, object userState) {
            if ((this.onBeginLoginWithTokenDelegate == null)) {
                this.onBeginLoginWithTokenDelegate = new BeginOperationDelegate(this.OnBeginLoginWithToken);
            }
            if ((this.onEndLoginWithTokenDelegate == null)) {
                this.onEndLoginWithTokenDelegate = new EndOperationDelegate(this.OnEndLoginWithToken);
            }
            if ((this.onLoginWithTokenCompletedDelegate == null)) {
                this.onLoginWithTokenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginWithTokenCompleted);
            }
            base.InvokeAsync(this.onBeginLoginWithTokenDelegate, new object[] {
                        token}, this.onEndLoginWithTokenDelegate, this.onLoginWithTokenCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightContactMap.NexusCore.CoreService.BeginGetLocationData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLocationData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<SilverlightContactMap.NexusCore.ContactLocationInfo> SilverlightContactMap.NexusCore.CoreService.EndGetLocationData(System.IAsyncResult result) {
            return base.Channel.EndGetLocationData(result);
        }
        
        private System.IAsyncResult OnBeginGetLocationData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightContactMap.NexusCore.CoreService)(this)).BeginGetLocationData(callback, asyncState);
        }
        
        private object[] OnEndGetLocationData(System.IAsyncResult result) {
            System.Collections.Generic.List<SilverlightContactMap.NexusCore.ContactLocationInfo> retVal = ((SilverlightContactMap.NexusCore.CoreService)(this)).EndGetLocationData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLocationDataCompleted(object state) {
            if ((this.GetLocationDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLocationDataCompleted(this, new GetLocationDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLocationDataAsync() {
            this.GetLocationDataAsync(null);
        }
        
        public void GetLocationDataAsync(object userState) {
            if ((this.onBeginGetLocationDataDelegate == null)) {
                this.onBeginGetLocationDataDelegate = new BeginOperationDelegate(this.OnBeginGetLocationData);
            }
            if ((this.onEndGetLocationDataDelegate == null)) {
                this.onEndGetLocationDataDelegate = new EndOperationDelegate(this.OnEndGetLocationData);
            }
            if ((this.onGetLocationDataCompletedDelegate == null)) {
                this.onGetLocationDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLocationDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetLocationDataDelegate, null, this.onEndGetLocationDataDelegate, this.onGetLocationDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightContactMap.NexusCore.CoreService.BeginGetMultipleLocations(System.Collections.Generic.List<int> rowIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMultipleLocations(rowIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<SilverlightContactMap.NexusCore.UserLocationData> SilverlightContactMap.NexusCore.CoreService.EndGetMultipleLocations(System.IAsyncResult result) {
            return base.Channel.EndGetMultipleLocations(result);
        }
        
        private System.IAsyncResult OnBeginGetMultipleLocations(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<int> rowIds = ((System.Collections.Generic.List<int>)(inValues[0]));
            return ((SilverlightContactMap.NexusCore.CoreService)(this)).BeginGetMultipleLocations(rowIds, callback, asyncState);
        }
        
        private object[] OnEndGetMultipleLocations(System.IAsyncResult result) {
            System.Collections.Generic.List<SilverlightContactMap.NexusCore.UserLocationData> retVal = ((SilverlightContactMap.NexusCore.CoreService)(this)).EndGetMultipleLocations(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMultipleLocationsCompleted(object state) {
            if ((this.GetMultipleLocationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMultipleLocationsCompleted(this, new GetMultipleLocationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMultipleLocationsAsync(System.Collections.Generic.List<int> rowIds) {
            this.GetMultipleLocationsAsync(rowIds, null);
        }
        
        public void GetMultipleLocationsAsync(System.Collections.Generic.List<int> rowIds, object userState) {
            if ((this.onBeginGetMultipleLocationsDelegate == null)) {
                this.onBeginGetMultipleLocationsDelegate = new BeginOperationDelegate(this.OnBeginGetMultipleLocations);
            }
            if ((this.onEndGetMultipleLocationsDelegate == null)) {
                this.onEndGetMultipleLocationsDelegate = new EndOperationDelegate(this.OnEndGetMultipleLocations);
            }
            if ((this.onGetMultipleLocationsCompletedDelegate == null)) {
                this.onGetMultipleLocationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMultipleLocationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetMultipleLocationsDelegate, new object[] {
                        rowIds}, this.onEndGetMultipleLocationsDelegate, this.onGetMultipleLocationsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightContactMap.NexusCore.CoreService.BeginGetAccounts(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccounts(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<SilverlightContactMap.NexusCore.AccountInfo> SilverlightContactMap.NexusCore.CoreService.EndGetAccounts(System.IAsyncResult result) {
            return base.Channel.EndGetAccounts(result);
        }
        
        private System.IAsyncResult OnBeginGetAccounts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightContactMap.NexusCore.CoreService)(this)).BeginGetAccounts(callback, asyncState);
        }
        
        private object[] OnEndGetAccounts(System.IAsyncResult result) {
            System.Collections.Generic.List<SilverlightContactMap.NexusCore.AccountInfo> retVal = ((SilverlightContactMap.NexusCore.CoreService)(this)).EndGetAccounts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountsCompleted(object state) {
            if ((this.GetAccountsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountsCompleted(this, new GetAccountsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountsAsync() {
            this.GetAccountsAsync(null);
        }
        
        public void GetAccountsAsync(object userState) {
            if ((this.onBeginGetAccountsDelegate == null)) {
                this.onBeginGetAccountsDelegate = new BeginOperationDelegate(this.OnBeginGetAccounts);
            }
            if ((this.onEndGetAccountsDelegate == null)) {
                this.onEndGetAccountsDelegate = new EndOperationDelegate(this.OnEndGetAccounts);
            }
            if ((this.onGetAccountsCompletedDelegate == null)) {
                this.onGetAccountsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountsDelegate, null, this.onEndGetAccountsDelegate, this.onGetAccountsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightContactMap.NexusCore.CoreService.BeginGetMyAccountInfo(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMyAccountInfo(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightContactMap.NexusCore.MyAccountInformation SilverlightContactMap.NexusCore.CoreService.EndGetMyAccountInfo(System.IAsyncResult result) {
            return base.Channel.EndGetMyAccountInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetMyAccountInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightContactMap.NexusCore.CoreService)(this)).BeginGetMyAccountInfo(callback, asyncState);
        }
        
        private object[] OnEndGetMyAccountInfo(System.IAsyncResult result) {
            SilverlightContactMap.NexusCore.MyAccountInformation retVal = ((SilverlightContactMap.NexusCore.CoreService)(this)).EndGetMyAccountInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMyAccountInfoCompleted(object state) {
            if ((this.GetMyAccountInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMyAccountInfoCompleted(this, new GetMyAccountInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMyAccountInfoAsync() {
            this.GetMyAccountInfoAsync(null);
        }
        
        public void GetMyAccountInfoAsync(object userState) {
            if ((this.onBeginGetMyAccountInfoDelegate == null)) {
                this.onBeginGetMyAccountInfoDelegate = new BeginOperationDelegate(this.OnBeginGetMyAccountInfo);
            }
            if ((this.onEndGetMyAccountInfoDelegate == null)) {
                this.onEndGetMyAccountInfoDelegate = new EndOperationDelegate(this.OnEndGetMyAccountInfo);
            }
            if ((this.onGetMyAccountInfoCompletedDelegate == null)) {
                this.onGetMyAccountInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMyAccountInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetMyAccountInfoDelegate, null, this.onEndGetMyAccountInfoDelegate, this.onGetMyAccountInfoCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightContactMap.NexusCore.CoreService CreateChannel() {
            return new CoreServiceClientChannel(this);
        }
        
        private class CoreServiceClientChannel : ChannelBase<SilverlightContactMap.NexusCore.CoreService>, SilverlightContactMap.NexusCore.CoreService {
            
            public CoreServiceClientChannel(System.ServiceModel.ClientBase<SilverlightContactMap.NexusCore.CoreService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginLogout(SilverlightContactMap.NexusCore.LogoutRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("Logout", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightContactMap.NexusCore.LogoutResponse EndLogout(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightContactMap.NexusCore.LogoutResponse _result = ((SilverlightContactMap.NexusCore.LogoutResponse)(base.EndInvoke("Logout", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLocation(SilverlightContactMap.NexusCore.GetLocationRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetLocation", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightContactMap.NexusCore.GetLocationResponse EndGetLocation(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightContactMap.NexusCore.GetLocationResponse _result = ((SilverlightContactMap.NexusCore.GetLocationResponse)(base.EndInvoke("GetLocation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Login", _args, result);
            }
            
            public System.IAsyncResult BeginCookieLogin(string username, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("CookieLogin", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCookieLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CookieLogin", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLoginWithToken(string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = token;
                System.IAsyncResult _result = base.BeginInvoke("LoginWithToken", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLoginWithToken(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("LoginWithToken", _args, result);
            }
            
            public System.IAsyncResult BeginGetLocationData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetLocationData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<SilverlightContactMap.NexusCore.ContactLocationInfo> EndGetLocationData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<SilverlightContactMap.NexusCore.ContactLocationInfo> _result = ((System.Collections.Generic.List<SilverlightContactMap.NexusCore.ContactLocationInfo>)(base.EndInvoke("GetLocationData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMultipleLocations(System.Collections.Generic.List<int> rowIds, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = rowIds;
                System.IAsyncResult _result = base.BeginInvoke("GetMultipleLocations", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<SilverlightContactMap.NexusCore.UserLocationData> EndGetMultipleLocations(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<SilverlightContactMap.NexusCore.UserLocationData> _result = ((System.Collections.Generic.List<SilverlightContactMap.NexusCore.UserLocationData>)(base.EndInvoke("GetMultipleLocations", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAccounts(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAccounts", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<SilverlightContactMap.NexusCore.AccountInfo> EndGetAccounts(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<SilverlightContactMap.NexusCore.AccountInfo> _result = ((System.Collections.Generic.List<SilverlightContactMap.NexusCore.AccountInfo>)(base.EndInvoke("GetAccounts", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMyAccountInfo(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetMyAccountInfo", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightContactMap.NexusCore.MyAccountInformation EndGetMyAccountInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightContactMap.NexusCore.MyAccountInformation _result = ((SilverlightContactMap.NexusCore.MyAccountInformation)(base.EndInvoke("GetMyAccountInfo", _args, result)));
                return _result;
            }
        }
    }
}
