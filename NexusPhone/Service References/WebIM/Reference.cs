//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace NexusPhone.WebIM {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IMStatus", Namespace="http://schemas.datacontract.org/2004/07/InstantMessage")]
    public enum IMStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AVAILABLE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AWAY = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BUSY = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IDLE = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INVISIBLE = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OFFLINE = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnThePhone = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PushChannelType", Namespace="http://schemas.datacontract.org/2004/07/NexusCore.DataContracts")]
    public enum PushChannelType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GenericTcp = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GenericUdp = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MicrosoftPN = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="com.adrensoftware.webim", ConfigurationName="WebIM.IWebIMWinPhone")]
    public interface IWebIMWinPhone {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="com.adrensoftware.webim/ICoreLogin/LoginToCore", ReplyAction="com.adrensoftware.webim/ICoreLogin/LoginToCoreResponse")]
        System.IAsyncResult BeginLoginToCore(string username, string password, System.AsyncCallback callback, object asyncState);
        
        void EndLoginToCore(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="com.adrensoftware.webim/ICoreLogin/LoginToCoreWithToken", ReplyAction="com.adrensoftware.webim/ICoreLogin/LoginToCoreWithTokenResponse")]
        System.IAsyncResult BeginLoginToCoreWithToken(string token, System.AsyncCallback callback, object asyncState);
        
        void EndLoginToCoreWithToken(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="com.adrensoftware.webim/IWebIMWinPhone/PreconfiguredLogin", ReplyAction="com.adrensoftware.webim/IWebIMWinPhone/PreconfiguredLoginResponse")]
        System.IAsyncResult BeginPreconfiguredLogin(int protocolId, NexusPhone.WebIM.IMStatus status, System.AsyncCallback callback, object asyncState);
        
        void EndPreconfiguredLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="com.adrensoftware.webim/IWebIMWinPhone/StartSession", ReplyAction="com.adrensoftware.webim/IWebIMWinPhone/StartSessionResponse")]
        System.IAsyncResult BeginStartSession(System.AsyncCallback callback, object asyncState);
        
        void EndStartSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="com.adrensoftware.webim/IWebIMWinPhone/SendMessage", ReplyAction="com.adrensoftware.webim/IWebIMWinPhone/SendMessageResponse")]
        System.IAsyncResult BeginSendMessage(System.Guid protocolId, string username, string messagebody, System.AsyncCallback callback, object asyncState);
        
        void EndSendMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="com.adrensoftware.webim/IWebIMWinPhone/StartPushStream", ReplyAction="com.adrensoftware.webim/IWebIMWinPhone/StartPushStreamResponse")]
        System.IAsyncResult BeginStartPushStream(NexusPhone.WebIM.PushChannelType type, System.Uri urichannel, System.AsyncCallback callback, object asyncState);
        
        void EndStartPushStream(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="com.adrensoftware.webim/IWebIMWinPhone/StopPushStream", ReplyAction="com.adrensoftware.webim/IWebIMWinPhone/StopPushStreamResponse")]
        System.IAsyncResult BeginStopPushStream(System.AsyncCallback callback, object asyncState);
        
        void EndStopPushStream(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWebIMWinPhoneChannel : NexusPhone.WebIM.IWebIMWinPhone, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebIMWinPhoneClient : System.ServiceModel.ClientBase<NexusPhone.WebIM.IWebIMWinPhone>, NexusPhone.WebIM.IWebIMWinPhone {
        
        private BeginOperationDelegate onBeginLoginToCoreDelegate;
        
        private EndOperationDelegate onEndLoginToCoreDelegate;
        
        private System.Threading.SendOrPostCallback onLoginToCoreCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginToCoreWithTokenDelegate;
        
        private EndOperationDelegate onEndLoginToCoreWithTokenDelegate;
        
        private System.Threading.SendOrPostCallback onLoginToCoreWithTokenCompletedDelegate;
        
        private BeginOperationDelegate onBeginPreconfiguredLoginDelegate;
        
        private EndOperationDelegate onEndPreconfiguredLoginDelegate;
        
        private System.Threading.SendOrPostCallback onPreconfiguredLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginStartSessionDelegate;
        
        private EndOperationDelegate onEndStartSessionDelegate;
        
        private System.Threading.SendOrPostCallback onStartSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendMessageDelegate;
        
        private EndOperationDelegate onEndSendMessageDelegate;
        
        private System.Threading.SendOrPostCallback onSendMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginStartPushStreamDelegate;
        
        private EndOperationDelegate onEndStartPushStreamDelegate;
        
        private System.Threading.SendOrPostCallback onStartPushStreamCompletedDelegate;
        
        private BeginOperationDelegate onBeginStopPushStreamDelegate;
        
        private EndOperationDelegate onEndStopPushStreamDelegate;
        
        private System.Threading.SendOrPostCallback onStopPushStreamCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WebIMWinPhoneClient() {
        }
        
        public WebIMWinPhoneClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebIMWinPhoneClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebIMWinPhoneClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebIMWinPhoneClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LoginToCoreCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LoginToCoreWithTokenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PreconfiguredLoginCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StartSessionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendMessageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StartPushStreamCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StopPushStreamCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NexusPhone.WebIM.IWebIMWinPhone.BeginLoginToCore(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoginToCore(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void NexusPhone.WebIM.IWebIMWinPhone.EndLoginToCore(System.IAsyncResult result) {
            base.Channel.EndLoginToCore(result);
        }
        
        private System.IAsyncResult OnBeginLoginToCore(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((NexusPhone.WebIM.IWebIMWinPhone)(this)).BeginLoginToCore(username, password, callback, asyncState);
        }
        
        private object[] OnEndLoginToCore(System.IAsyncResult result) {
            ((NexusPhone.WebIM.IWebIMWinPhone)(this)).EndLoginToCore(result);
            return null;
        }
        
        private void OnLoginToCoreCompleted(object state) {
            if ((this.LoginToCoreCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginToCoreCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginToCoreAsync(string username, string password) {
            this.LoginToCoreAsync(username, password, null);
        }
        
        public void LoginToCoreAsync(string username, string password, object userState) {
            if ((this.onBeginLoginToCoreDelegate == null)) {
                this.onBeginLoginToCoreDelegate = new BeginOperationDelegate(this.OnBeginLoginToCore);
            }
            if ((this.onEndLoginToCoreDelegate == null)) {
                this.onEndLoginToCoreDelegate = new EndOperationDelegate(this.OnEndLoginToCore);
            }
            if ((this.onLoginToCoreCompletedDelegate == null)) {
                this.onLoginToCoreCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginToCoreCompleted);
            }
            base.InvokeAsync(this.onBeginLoginToCoreDelegate, new object[] {
                        username,
                        password}, this.onEndLoginToCoreDelegate, this.onLoginToCoreCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NexusPhone.WebIM.IWebIMWinPhone.BeginLoginToCoreWithToken(string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoginToCoreWithToken(token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void NexusPhone.WebIM.IWebIMWinPhone.EndLoginToCoreWithToken(System.IAsyncResult result) {
            base.Channel.EndLoginToCoreWithToken(result);
        }
        
        private System.IAsyncResult OnBeginLoginToCoreWithToken(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string token = ((string)(inValues[0]));
            return ((NexusPhone.WebIM.IWebIMWinPhone)(this)).BeginLoginToCoreWithToken(token, callback, asyncState);
        }
        
        private object[] OnEndLoginToCoreWithToken(System.IAsyncResult result) {
            ((NexusPhone.WebIM.IWebIMWinPhone)(this)).EndLoginToCoreWithToken(result);
            return null;
        }
        
        private void OnLoginToCoreWithTokenCompleted(object state) {
            if ((this.LoginToCoreWithTokenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginToCoreWithTokenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginToCoreWithTokenAsync(string token) {
            this.LoginToCoreWithTokenAsync(token, null);
        }
        
        public void LoginToCoreWithTokenAsync(string token, object userState) {
            if ((this.onBeginLoginToCoreWithTokenDelegate == null)) {
                this.onBeginLoginToCoreWithTokenDelegate = new BeginOperationDelegate(this.OnBeginLoginToCoreWithToken);
            }
            if ((this.onEndLoginToCoreWithTokenDelegate == null)) {
                this.onEndLoginToCoreWithTokenDelegate = new EndOperationDelegate(this.OnEndLoginToCoreWithToken);
            }
            if ((this.onLoginToCoreWithTokenCompletedDelegate == null)) {
                this.onLoginToCoreWithTokenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginToCoreWithTokenCompleted);
            }
            base.InvokeAsync(this.onBeginLoginToCoreWithTokenDelegate, new object[] {
                        token}, this.onEndLoginToCoreWithTokenDelegate, this.onLoginToCoreWithTokenCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NexusPhone.WebIM.IWebIMWinPhone.BeginPreconfiguredLogin(int protocolId, NexusPhone.WebIM.IMStatus status, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPreconfiguredLogin(protocolId, status, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void NexusPhone.WebIM.IWebIMWinPhone.EndPreconfiguredLogin(System.IAsyncResult result) {
            base.Channel.EndPreconfiguredLogin(result);
        }
        
        private System.IAsyncResult OnBeginPreconfiguredLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int protocolId = ((int)(inValues[0]));
            NexusPhone.WebIM.IMStatus status = ((NexusPhone.WebIM.IMStatus)(inValues[1]));
            return ((NexusPhone.WebIM.IWebIMWinPhone)(this)).BeginPreconfiguredLogin(protocolId, status, callback, asyncState);
        }
        
        private object[] OnEndPreconfiguredLogin(System.IAsyncResult result) {
            ((NexusPhone.WebIM.IWebIMWinPhone)(this)).EndPreconfiguredLogin(result);
            return null;
        }
        
        private void OnPreconfiguredLoginCompleted(object state) {
            if ((this.PreconfiguredLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PreconfiguredLoginCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PreconfiguredLoginAsync(int protocolId, NexusPhone.WebIM.IMStatus status) {
            this.PreconfiguredLoginAsync(protocolId, status, null);
        }
        
        public void PreconfiguredLoginAsync(int protocolId, NexusPhone.WebIM.IMStatus status, object userState) {
            if ((this.onBeginPreconfiguredLoginDelegate == null)) {
                this.onBeginPreconfiguredLoginDelegate = new BeginOperationDelegate(this.OnBeginPreconfiguredLogin);
            }
            if ((this.onEndPreconfiguredLoginDelegate == null)) {
                this.onEndPreconfiguredLoginDelegate = new EndOperationDelegate(this.OnEndPreconfiguredLogin);
            }
            if ((this.onPreconfiguredLoginCompletedDelegate == null)) {
                this.onPreconfiguredLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPreconfiguredLoginCompleted);
            }
            base.InvokeAsync(this.onBeginPreconfiguredLoginDelegate, new object[] {
                        protocolId,
                        status}, this.onEndPreconfiguredLoginDelegate, this.onPreconfiguredLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NexusPhone.WebIM.IWebIMWinPhone.BeginStartSession(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartSession(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void NexusPhone.WebIM.IWebIMWinPhone.EndStartSession(System.IAsyncResult result) {
            base.Channel.EndStartSession(result);
        }
        
        private System.IAsyncResult OnBeginStartSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((NexusPhone.WebIM.IWebIMWinPhone)(this)).BeginStartSession(callback, asyncState);
        }
        
        private object[] OnEndStartSession(System.IAsyncResult result) {
            ((NexusPhone.WebIM.IWebIMWinPhone)(this)).EndStartSession(result);
            return null;
        }
        
        private void OnStartSessionCompleted(object state) {
            if ((this.StartSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartSessionAsync() {
            this.StartSessionAsync(null);
        }
        
        public void StartSessionAsync(object userState) {
            if ((this.onBeginStartSessionDelegate == null)) {
                this.onBeginStartSessionDelegate = new BeginOperationDelegate(this.OnBeginStartSession);
            }
            if ((this.onEndStartSessionDelegate == null)) {
                this.onEndStartSessionDelegate = new EndOperationDelegate(this.OnEndStartSession);
            }
            if ((this.onStartSessionCompletedDelegate == null)) {
                this.onStartSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartSessionCompleted);
            }
            base.InvokeAsync(this.onBeginStartSessionDelegate, null, this.onEndStartSessionDelegate, this.onStartSessionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NexusPhone.WebIM.IWebIMWinPhone.BeginSendMessage(System.Guid protocolId, string username, string messagebody, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendMessage(protocolId, username, messagebody, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void NexusPhone.WebIM.IWebIMWinPhone.EndSendMessage(System.IAsyncResult result) {
            base.Channel.EndSendMessage(result);
        }
        
        private System.IAsyncResult OnBeginSendMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid protocolId = ((System.Guid)(inValues[0]));
            string username = ((string)(inValues[1]));
            string messagebody = ((string)(inValues[2]));
            return ((NexusPhone.WebIM.IWebIMWinPhone)(this)).BeginSendMessage(protocolId, username, messagebody, callback, asyncState);
        }
        
        private object[] OnEndSendMessage(System.IAsyncResult result) {
            ((NexusPhone.WebIM.IWebIMWinPhone)(this)).EndSendMessage(result);
            return null;
        }
        
        private void OnSendMessageCompleted(object state) {
            if ((this.SendMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendMessageAsync(System.Guid protocolId, string username, string messagebody) {
            this.SendMessageAsync(protocolId, username, messagebody, null);
        }
        
        public void SendMessageAsync(System.Guid protocolId, string username, string messagebody, object userState) {
            if ((this.onBeginSendMessageDelegate == null)) {
                this.onBeginSendMessageDelegate = new BeginOperationDelegate(this.OnBeginSendMessage);
            }
            if ((this.onEndSendMessageDelegate == null)) {
                this.onEndSendMessageDelegate = new EndOperationDelegate(this.OnEndSendMessage);
            }
            if ((this.onSendMessageCompletedDelegate == null)) {
                this.onSendMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendMessageCompleted);
            }
            base.InvokeAsync(this.onBeginSendMessageDelegate, new object[] {
                        protocolId,
                        username,
                        messagebody}, this.onEndSendMessageDelegate, this.onSendMessageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NexusPhone.WebIM.IWebIMWinPhone.BeginStartPushStream(NexusPhone.WebIM.PushChannelType type, System.Uri urichannel, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartPushStream(type, urichannel, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void NexusPhone.WebIM.IWebIMWinPhone.EndStartPushStream(System.IAsyncResult result) {
            base.Channel.EndStartPushStream(result);
        }
        
        private System.IAsyncResult OnBeginStartPushStream(object[] inValues, System.AsyncCallback callback, object asyncState) {
            NexusPhone.WebIM.PushChannelType type = ((NexusPhone.WebIM.PushChannelType)(inValues[0]));
            System.Uri urichannel = ((System.Uri)(inValues[1]));
            return ((NexusPhone.WebIM.IWebIMWinPhone)(this)).BeginStartPushStream(type, urichannel, callback, asyncState);
        }
        
        private object[] OnEndStartPushStream(System.IAsyncResult result) {
            ((NexusPhone.WebIM.IWebIMWinPhone)(this)).EndStartPushStream(result);
            return null;
        }
        
        private void OnStartPushStreamCompleted(object state) {
            if ((this.StartPushStreamCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartPushStreamCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartPushStreamAsync(NexusPhone.WebIM.PushChannelType type, System.Uri urichannel) {
            this.StartPushStreamAsync(type, urichannel, null);
        }
        
        public void StartPushStreamAsync(NexusPhone.WebIM.PushChannelType type, System.Uri urichannel, object userState) {
            if ((this.onBeginStartPushStreamDelegate == null)) {
                this.onBeginStartPushStreamDelegate = new BeginOperationDelegate(this.OnBeginStartPushStream);
            }
            if ((this.onEndStartPushStreamDelegate == null)) {
                this.onEndStartPushStreamDelegate = new EndOperationDelegate(this.OnEndStartPushStream);
            }
            if ((this.onStartPushStreamCompletedDelegate == null)) {
                this.onStartPushStreamCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartPushStreamCompleted);
            }
            base.InvokeAsync(this.onBeginStartPushStreamDelegate, new object[] {
                        type,
                        urichannel}, this.onEndStartPushStreamDelegate, this.onStartPushStreamCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NexusPhone.WebIM.IWebIMWinPhone.BeginStopPushStream(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStopPushStream(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void NexusPhone.WebIM.IWebIMWinPhone.EndStopPushStream(System.IAsyncResult result) {
            base.Channel.EndStopPushStream(result);
        }
        
        private System.IAsyncResult OnBeginStopPushStream(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((NexusPhone.WebIM.IWebIMWinPhone)(this)).BeginStopPushStream(callback, asyncState);
        }
        
        private object[] OnEndStopPushStream(System.IAsyncResult result) {
            ((NexusPhone.WebIM.IWebIMWinPhone)(this)).EndStopPushStream(result);
            return null;
        }
        
        private void OnStopPushStreamCompleted(object state) {
            if ((this.StopPushStreamCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StopPushStreamCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StopPushStreamAsync() {
            this.StopPushStreamAsync(null);
        }
        
        public void StopPushStreamAsync(object userState) {
            if ((this.onBeginStopPushStreamDelegate == null)) {
                this.onBeginStopPushStreamDelegate = new BeginOperationDelegate(this.OnBeginStopPushStream);
            }
            if ((this.onEndStopPushStreamDelegate == null)) {
                this.onEndStopPushStreamDelegate = new EndOperationDelegate(this.OnEndStopPushStream);
            }
            if ((this.onStopPushStreamCompletedDelegate == null)) {
                this.onStopPushStreamCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStopPushStreamCompleted);
            }
            base.InvokeAsync(this.onBeginStopPushStreamDelegate, null, this.onEndStopPushStreamDelegate, this.onStopPushStreamCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override NexusPhone.WebIM.IWebIMWinPhone CreateChannel() {
            return new WebIMWinPhoneClientChannel(this);
        }
        
        private class WebIMWinPhoneClientChannel : ChannelBase<NexusPhone.WebIM.IWebIMWinPhone>, NexusPhone.WebIM.IWebIMWinPhone {
            
            public WebIMWinPhoneClientChannel(System.ServiceModel.ClientBase<NexusPhone.WebIM.IWebIMWinPhone> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginLoginToCore(string username, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("LoginToCore", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLoginToCore(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("LoginToCore", _args, result);
            }
            
            public System.IAsyncResult BeginLoginToCoreWithToken(string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = token;
                System.IAsyncResult _result = base.BeginInvoke("LoginToCoreWithToken", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLoginToCoreWithToken(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("LoginToCoreWithToken", _args, result);
            }
            
            public System.IAsyncResult BeginPreconfiguredLogin(int protocolId, NexusPhone.WebIM.IMStatus status, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = protocolId;
                _args[1] = status;
                System.IAsyncResult _result = base.BeginInvoke("PreconfiguredLogin", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPreconfiguredLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PreconfiguredLogin", _args, result);
            }
            
            public System.IAsyncResult BeginStartSession(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("StartSession", _args, callback, asyncState);
                return _result;
            }
            
            public void EndStartSession(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("StartSession", _args, result);
            }
            
            public System.IAsyncResult BeginSendMessage(System.Guid protocolId, string username, string messagebody, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = protocolId;
                _args[1] = username;
                _args[2] = messagebody;
                System.IAsyncResult _result = base.BeginInvoke("SendMessage", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSendMessage(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SendMessage", _args, result);
            }
            
            public System.IAsyncResult BeginStartPushStream(NexusPhone.WebIM.PushChannelType type, System.Uri urichannel, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = type;
                _args[1] = urichannel;
                System.IAsyncResult _result = base.BeginInvoke("StartPushStream", _args, callback, asyncState);
                return _result;
            }
            
            public void EndStartPushStream(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("StartPushStream", _args, result);
            }
            
            public System.IAsyncResult BeginStopPushStream(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("StopPushStream", _args, callback, asyncState);
                return _result;
            }
            
            public void EndStopPushStream(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("StopPushStream", _args, result);
            }
        }
    }
}
