//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NexusWeb.AdminChannel {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IMStatus", Namespace="http://schemas.datacontract.org/2004/07/InstantMessage")]
    public enum IMStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AVAILABLE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AWAY = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BUSY = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IDLE = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INVISIBLE = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OFFLINE = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnThePhone = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AdminChannel.IAdminChannel")]
    public interface IAdminChannel {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminChannel/DisconnectSwarmMember", ReplyAction="http://tempuri.org/IAdminChannel/DisconnectSwarmMemberResponse")]
        void DisconnectSwarmMember(int deviceid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAdminChannel/DisconnectSwarmMember", ReplyAction="http://tempuri.org/IAdminChannel/DisconnectSwarmMemberResponse")]
        System.IAsyncResult BeginDisconnectSwarmMember(int deviceid, System.AsyncCallback callback, object asyncState);
        
        void EndDisconnectSwarmMember(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminChannel/BroadcastNewAccount", ReplyAction="http://tempuri.org/IAdminChannel/BroadcastNewAccountResponse")]
        void BroadcastNewAccount(int accountid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAdminChannel/BroadcastNewAccount", ReplyAction="http://tempuri.org/IAdminChannel/BroadcastNewAccountResponse")]
        System.IAsyncResult BeginBroadcastNewAccount(int accountid, System.AsyncCallback callback, object asyncState);
        
        void EndBroadcastNewAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminChannel/ChangeAllProtocolsStatusForAccount", ReplyAction="http://tempuri.org/IAdminChannel/ChangeAllProtocolsStatusForAccountResponse")]
        void ChangeAllProtocolsStatusForAccount(int userid, NexusWeb.AdminChannel.IMStatus status);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAdminChannel/ChangeAllProtocolsStatusForAccount", ReplyAction="http://tempuri.org/IAdminChannel/ChangeAllProtocolsStatusForAccountResponse")]
        System.IAsyncResult BeginChangeAllProtocolsStatusForAccount(int userid, NexusWeb.AdminChannel.IMStatus status, System.AsyncCallback callback, object asyncState);
        
        void EndChangeAllProtocolsStatusForAccount(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdminChannelChannel : NexusWeb.AdminChannel.IAdminChannel, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdminChannelClient : System.ServiceModel.ClientBase<NexusWeb.AdminChannel.IAdminChannel>, NexusWeb.AdminChannel.IAdminChannel {
        
        private BeginOperationDelegate onBeginDisconnectSwarmMemberDelegate;
        
        private EndOperationDelegate onEndDisconnectSwarmMemberDelegate;
        
        private System.Threading.SendOrPostCallback onDisconnectSwarmMemberCompletedDelegate;
        
        private BeginOperationDelegate onBeginBroadcastNewAccountDelegate;
        
        private EndOperationDelegate onEndBroadcastNewAccountDelegate;
        
        private System.Threading.SendOrPostCallback onBroadcastNewAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeAllProtocolsStatusForAccountDelegate;
        
        private EndOperationDelegate onEndChangeAllProtocolsStatusForAccountDelegate;
        
        private System.Threading.SendOrPostCallback onChangeAllProtocolsStatusForAccountCompletedDelegate;
        
        public AdminChannelClient() {
        }
        
        public AdminChannelClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AdminChannelClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminChannelClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminChannelClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DisconnectSwarmMemberCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> BroadcastNewAccountCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ChangeAllProtocolsStatusForAccountCompleted;
        
        public void DisconnectSwarmMember(int deviceid) {
            base.Channel.DisconnectSwarmMember(deviceid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDisconnectSwarmMember(int deviceid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisconnectSwarmMember(deviceid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDisconnectSwarmMember(System.IAsyncResult result) {
            base.Channel.EndDisconnectSwarmMember(result);
        }
        
        private System.IAsyncResult OnBeginDisconnectSwarmMember(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int deviceid = ((int)(inValues[0]));
            return this.BeginDisconnectSwarmMember(deviceid, callback, asyncState);
        }
        
        private object[] OnEndDisconnectSwarmMember(System.IAsyncResult result) {
            this.EndDisconnectSwarmMember(result);
            return null;
        }
        
        private void OnDisconnectSwarmMemberCompleted(object state) {
            if ((this.DisconnectSwarmMemberCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DisconnectSwarmMemberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DisconnectSwarmMemberAsync(int deviceid) {
            this.DisconnectSwarmMemberAsync(deviceid, null);
        }
        
        public void DisconnectSwarmMemberAsync(int deviceid, object userState) {
            if ((this.onBeginDisconnectSwarmMemberDelegate == null)) {
                this.onBeginDisconnectSwarmMemberDelegate = new BeginOperationDelegate(this.OnBeginDisconnectSwarmMember);
            }
            if ((this.onEndDisconnectSwarmMemberDelegate == null)) {
                this.onEndDisconnectSwarmMemberDelegate = new EndOperationDelegate(this.OnEndDisconnectSwarmMember);
            }
            if ((this.onDisconnectSwarmMemberCompletedDelegate == null)) {
                this.onDisconnectSwarmMemberCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisconnectSwarmMemberCompleted);
            }
            base.InvokeAsync(this.onBeginDisconnectSwarmMemberDelegate, new object[] {
                        deviceid}, this.onEndDisconnectSwarmMemberDelegate, this.onDisconnectSwarmMemberCompletedDelegate, userState);
        }
        
        public void BroadcastNewAccount(int accountid) {
            base.Channel.BroadcastNewAccount(accountid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBroadcastNewAccount(int accountid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBroadcastNewAccount(accountid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndBroadcastNewAccount(System.IAsyncResult result) {
            base.Channel.EndBroadcastNewAccount(result);
        }
        
        private System.IAsyncResult OnBeginBroadcastNewAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int accountid = ((int)(inValues[0]));
            return this.BeginBroadcastNewAccount(accountid, callback, asyncState);
        }
        
        private object[] OnEndBroadcastNewAccount(System.IAsyncResult result) {
            this.EndBroadcastNewAccount(result);
            return null;
        }
        
        private void OnBroadcastNewAccountCompleted(object state) {
            if ((this.BroadcastNewAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BroadcastNewAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BroadcastNewAccountAsync(int accountid) {
            this.BroadcastNewAccountAsync(accountid, null);
        }
        
        public void BroadcastNewAccountAsync(int accountid, object userState) {
            if ((this.onBeginBroadcastNewAccountDelegate == null)) {
                this.onBeginBroadcastNewAccountDelegate = new BeginOperationDelegate(this.OnBeginBroadcastNewAccount);
            }
            if ((this.onEndBroadcastNewAccountDelegate == null)) {
                this.onEndBroadcastNewAccountDelegate = new EndOperationDelegate(this.OnEndBroadcastNewAccount);
            }
            if ((this.onBroadcastNewAccountCompletedDelegate == null)) {
                this.onBroadcastNewAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBroadcastNewAccountCompleted);
            }
            base.InvokeAsync(this.onBeginBroadcastNewAccountDelegate, new object[] {
                        accountid}, this.onEndBroadcastNewAccountDelegate, this.onBroadcastNewAccountCompletedDelegate, userState);
        }
        
        public void ChangeAllProtocolsStatusForAccount(int userid, NexusWeb.AdminChannel.IMStatus status) {
            base.Channel.ChangeAllProtocolsStatusForAccount(userid, status);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginChangeAllProtocolsStatusForAccount(int userid, NexusWeb.AdminChannel.IMStatus status, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeAllProtocolsStatusForAccount(userid, status, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndChangeAllProtocolsStatusForAccount(System.IAsyncResult result) {
            base.Channel.EndChangeAllProtocolsStatusForAccount(result);
        }
        
        private System.IAsyncResult OnBeginChangeAllProtocolsStatusForAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userid = ((int)(inValues[0]));
            NexusWeb.AdminChannel.IMStatus status = ((NexusWeb.AdminChannel.IMStatus)(inValues[1]));
            return this.BeginChangeAllProtocolsStatusForAccount(userid, status, callback, asyncState);
        }
        
        private object[] OnEndChangeAllProtocolsStatusForAccount(System.IAsyncResult result) {
            this.EndChangeAllProtocolsStatusForAccount(result);
            return null;
        }
        
        private void OnChangeAllProtocolsStatusForAccountCompleted(object state) {
            if ((this.ChangeAllProtocolsStatusForAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeAllProtocolsStatusForAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeAllProtocolsStatusForAccountAsync(int userid, NexusWeb.AdminChannel.IMStatus status) {
            this.ChangeAllProtocolsStatusForAccountAsync(userid, status, null);
        }
        
        public void ChangeAllProtocolsStatusForAccountAsync(int userid, NexusWeb.AdminChannel.IMStatus status, object userState) {
            if ((this.onBeginChangeAllProtocolsStatusForAccountDelegate == null)) {
                this.onBeginChangeAllProtocolsStatusForAccountDelegate = new BeginOperationDelegate(this.OnBeginChangeAllProtocolsStatusForAccount);
            }
            if ((this.onEndChangeAllProtocolsStatusForAccountDelegate == null)) {
                this.onEndChangeAllProtocolsStatusForAccountDelegate = new EndOperationDelegate(this.OnEndChangeAllProtocolsStatusForAccount);
            }
            if ((this.onChangeAllProtocolsStatusForAccountCompletedDelegate == null)) {
                this.onChangeAllProtocolsStatusForAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeAllProtocolsStatusForAccountCompleted);
            }
            base.InvokeAsync(this.onBeginChangeAllProtocolsStatusForAccountDelegate, new object[] {
                        userid,
                        status}, this.onEndChangeAllProtocolsStatusForAccountDelegate, this.onChangeAllProtocolsStatusForAccountCompletedDelegate, userState);
        }
    }
}
