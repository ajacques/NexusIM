#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NexusCore.Databases
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="NexusCore")]
	public partial class NexusCoreDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertAccountSetting(AccountSetting instance);
    partial void UpdateAccountSetting(AccountSetting instance);
    partial void DeleteAccountSetting(AccountSetting instance);
    partial void InsertAuthToken(AuthToken instance);
    partial void UpdateAuthToken(AuthToken instance);
    partial void DeleteAuthToken(AuthToken instance);
    partial void InsertDevice(Device instance);
    partial void UpdateDevice(Device instance);
    partial void DeleteDevice(Device instance);
    partial void InsertLocationPrivacy(LocationPrivacy instance);
    partial void UpdateLocationPrivacy(LocationPrivacy instance);
    partial void DeleteLocationPrivacy(LocationPrivacy instance);
    partial void InsertUserLocation(UserLocation instance);
    partial void UpdateUserLocation(UserLocation instance);
    partial void DeleteUserLocation(UserLocation instance);
    partial void InsertDeviceType(DeviceType instance);
    partial void UpdateDeviceType(DeviceType instance);
    partial void DeleteDeviceType(DeviceType instance);
    partial void InsertPhoneNumber(PhoneNumber instance);
    partial void UpdatePhoneNumber(PhoneNumber instance);
    partial void DeletePhoneNumber(PhoneNumber instance);
    #endregion
		
		public NexusCoreDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["NexusCoreConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NexusCoreDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NexusCoreDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NexusCoreDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NexusCoreDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<AccountSetting> AccountSettings
		{
			get
			{
				return this.GetTable<AccountSetting>();
			}
		}
		
		public System.Data.Linq.Table<AuthToken> AuthTokens
		{
			get
			{
				return this.GetTable<AuthToken>();
			}
		}
		
		public System.Data.Linq.Table<Device> Devices
		{
			get
			{
				return this.GetTable<Device>();
			}
		}
		
		public System.Data.Linq.Table<LocationPrivacy> LocationPrivacies
		{
			get
			{
				return this.GetTable<LocationPrivacy>();
			}
		}
		
		public System.Data.Linq.Table<UserLocation> UserLocations
		{
			get
			{
				return this.GetTable<UserLocation>();
			}
		}
		
		public System.Data.Linq.Table<DeviceType> DeviceTypes
		{
			get
			{
				return this.GetTable<DeviceType>();
			}
		}
		
		public System.Data.Linq.Table<Friend> Friends
		{
			get
			{
				return this.GetTable<Friend>();
			}
		}
		
		public System.Data.Linq.Table<PhoneNumber> PhoneNumbers
		{
			get
			{
				return this.GetTable<PhoneNumber>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accounts")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _userid;
		
		private string _guid;
		
		private string _acctype;
		
		private string _username;
		
		private string _password;
		
		private string _server;
		
		private bool _enabled;
		
		private bool _LoginState;
		
		private string _HostComputer;
		
		private EntitySet<AccountSetting> _Settings;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuseridChanging(int value);
    partial void OnuseridChanged();
    partial void OnguidChanging(string value);
    partial void OnguidChanged();
    partial void OnacctypeChanging(string value);
    partial void OnacctypeChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnserverChanging(string value);
    partial void OnserverChanged();
    partial void OnenabledChanging(bool value);
    partial void OnenabledChanged();
    partial void OnLoginStateChanging(bool value);
    partial void OnLoginStateChanged();
    partial void OnHostComputerChanging(string value);
    partial void OnHostComputerChanged();
    #endregion
		
		public Account()
		{
			this._Settings = new EntitySet<AccountSetting>(new Action<AccountSetting>(this.attach_Settings), new Action<AccountSetting>(this.detach_Settings));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", DbType="Int NOT NULL")]
		public int userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_guid", DbType="Char(36) NOT NULL", CanBeNull=false)]
		public string guid
		{
			get
			{
				return this._guid;
			}
			set
			{
				if ((this._guid != value))
				{
					this.OnguidChanging(value);
					this.SendPropertyChanging();
					this._guid = value;
					this.SendPropertyChanged("guid");
					this.OnguidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_acctype", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string acctype
		{
			get
			{
				return this._acctype;
			}
			set
			{
				if ((this._acctype != value))
				{
					this.OnacctypeChanging(value);
					this.SendPropertyChanging();
					this._acctype = value;
					this.SendPropertyChanged("acctype");
					this.OnacctypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_server", DbType="VarChar(50)")]
		public string server
		{
			get
			{
				return this._server;
			}
			set
			{
				if ((this._server != value))
				{
					this.OnserverChanging(value);
					this.SendPropertyChanging();
					this._server = value;
					this.SendPropertyChanged("server");
					this.OnserverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enabled", DbType="Bit NOT NULL")]
		public bool enabled
		{
			get
			{
				return this._enabled;
			}
			set
			{
				if ((this._enabled != value))
				{
					this.OnenabledChanging(value);
					this.SendPropertyChanging();
					this._enabled = value;
					this.SendPropertyChanged("enabled");
					this.OnenabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginState", DbType="bit")]
		public bool LoginState
		{
			get
			{
				return this._LoginState;
			}
			set
			{
				if ((this._LoginState != value))
				{
					this.OnLoginStateChanging(value);
					this.SendPropertyChanging();
					this._LoginState = value;
					this.SendPropertyChanged("LoginState");
					this.OnLoginStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostComputer", DbType="varchar(20)")]
		public string HostComputer
		{
			get
			{
				return this._HostComputer;
			}
			set
			{
				if ((this._HostComputer != value))
				{
					this.OnHostComputerChanging(value);
					this.SendPropertyChanging();
					this._HostComputer = value;
					this.SendPropertyChanged("HostComputer");
					this.OnHostComputerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountSetting", Storage="_Settings", ThisKey="id", OtherKey="accountid")]
		public EntitySet<AccountSetting> Settings
		{
			get
			{
				return this._Settings;
			}
			set
			{
				this._Settings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Account", Storage="_User", ThisKey="userid", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._userid = value.id;
					}
					else
					{
						this._userid = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Settings(AccountSetting entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Settings(AccountSetting entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _username;
		
		private string _password;
		
		private string _firstname;
		
		private bool _locationsharestate;
		
		private bool _canlogin;
		
		private string _emailauthtoken;
		
		private System.DateTime _dateregistered;
		
		private System.DateTime _lastseen;
		
		private ushort _AccountListVersion;
		
		private bool _IsIMSignedIn;
		
		private string _lastname;
		
		private byte[] _PasswordHash;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<AuthToken> _AuthTokens;
		
		private EntityRef<Device> _Devices;
		
		private EntitySet<LocationPrivacy> _LocationPrivacies;
		
		private EntitySet<UserLocation> _UserLocations;
		
		private EntitySet<PhoneNumber> _PhoneNumbers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnlocationsharestateChanging(bool value);
    partial void OnlocationsharestateChanged();
    partial void OncanloginChanging(bool value);
    partial void OncanloginChanged();
    partial void OnemailauthtokenChanging(string value);
    partial void OnemailauthtokenChanged();
    partial void OndateregisteredChanging(System.DateTime value);
    partial void OndateregisteredChanged();
    partial void OnlastseenChanging(System.DateTime value);
    partial void OnlastseenChanged();
    partial void OnAccountListVersionChanging(ushort value);
    partial void OnAccountListVersionChanged();
    partial void OnIsIMSignedInChanging(bool value);
    partial void OnIsIMSignedInChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPasswordSaltChanging(byte[] value);
    partial void OnPasswordSaltChanged();
    #endregion
		
		public User()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._AuthTokens = new EntitySet<AuthToken>(new Action<AuthToken>(this.attach_AuthTokens), new Action<AuthToken>(this.detach_AuthTokens));
			this._Devices = default(EntityRef<Device>);
			this._LocationPrivacies = new EntitySet<LocationPrivacy>(new Action<LocationPrivacy>(this.attach_LocationPrivacies), new Action<LocationPrivacy>(this.detach_LocationPrivacies));
			this._UserLocations = new EntitySet<UserLocation>(new Action<UserLocation>(this.attach_UserLocations), new Action<UserLocation>(this.detach_UserLocations));
			this._PhoneNumbers = new EntitySet<PhoneNumber>(new Action<PhoneNumber>(this.attach_PhoneNumbers), new Action<PhoneNumber>(this.detach_PhoneNumbers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="Char(64) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string firstname
		{
			get
			{
				return this._firstname;
			}
			set
			{
				if ((this._firstname != value))
				{
					this.OnfirstnameChanging(value);
					this.SendPropertyChanging();
					this._firstname = value;
					this.SendPropertyChanged("firstname");
					this.OnfirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_locationsharestate", DbType="Bit NOT NULL")]
		public bool locationsharestate
		{
			get
			{
				return this._locationsharestate;
			}
			set
			{
				if ((this._locationsharestate != value))
				{
					this.OnlocationsharestateChanging(value);
					this.SendPropertyChanging();
					this._locationsharestate = value;
					this.SendPropertyChanged("locationsharestate");
					this.OnlocationsharestateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_canlogin", DbType="Bit NOT NULL")]
		public bool canlogin
		{
			get
			{
				return this._canlogin;
			}
			set
			{
				if ((this._canlogin != value))
				{
					this.OncanloginChanging(value);
					this.SendPropertyChanging();
					this._canlogin = value;
					this.SendPropertyChanged("canlogin");
					this.OncanloginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailauthtoken", DbType="Char(20)")]
		public string emailauthtoken
		{
			get
			{
				return this._emailauthtoken;
			}
			set
			{
				if ((this._emailauthtoken != value))
				{
					this.OnemailauthtokenChanging(value);
					this.SendPropertyChanging();
					this._emailauthtoken = value;
					this.SendPropertyChanged("emailauthtoken");
					this.OnemailauthtokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateregistered", DbType="DateTime NOT NULL")]
		public System.DateTime dateregistered
		{
			get
			{
				return this._dateregistered;
			}
			set
			{
				if ((this._dateregistered != value))
				{
					this.OndateregisteredChanging(value);
					this.SendPropertyChanging();
					this._dateregistered = value;
					this.SendPropertyChanged("dateregistered");
					this.OndateregisteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastseen", DbType="DateTime NOT NULL")]
		public System.DateTime lastseen
		{
			get
			{
				return this._lastseen;
			}
			set
			{
				if ((this._lastseen != value))
				{
					this.OnlastseenChanging(value);
					this.SendPropertyChanging();
					this._lastseen = value;
					this.SendPropertyChanged("lastseen");
					this.OnlastseenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountListVersion", DbType="smallint")]
		public ushort AccountListVersion
		{
			get
			{
				return this._AccountListVersion;
			}
			set
			{
				if ((this._AccountListVersion != value))
				{
					this.OnAccountListVersionChanging(value);
					this.SendPropertyChanging();
					this._AccountListVersion = value;
					this.SendPropertyChanged("AccountListVersion");
					this.OnAccountListVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsIMSignedIn", DbType="bit")]
		public bool IsIMSignedIn
		{
			get
			{
				return this._IsIMSignedIn;
			}
			set
			{
				if ((this._IsIMSignedIn != value))
				{
					this.OnIsIMSignedInChanging(value);
					this.SendPropertyChanging();
					this._IsIMSignedIn = value;
					this.SendPropertyChanged("IsIMSignedIn");
					this.OnIsIMSignedInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="lastname", Storage="_lastname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._lastname;
			}
			set
			{
				if ((this._lastname != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._lastname = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="binary(64) NOT NULL", CanBeNull=false)]
		public byte[] PasswordSalt
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Account", Storage="_Accounts", ThisKey="id", OtherKey="userid")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AuthToken", Storage="_AuthTokens", ThisKey="id", OtherKey="userid")]
		public EntitySet<AuthToken> AuthTokens
		{
			get
			{
				return this._AuthTokens;
			}
			set
			{
				this._AuthTokens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Device", Storage="_Devices", ThisKey="id", OtherKey="userid", IsUnique=true, IsForeignKey=false)]
		public Device Devices
		{
			get
			{
				return this._Devices.Entity;
			}
			set
			{
				Device previousValue = this._Devices.Entity;
				if (((previousValue != value) 
							|| (this._Devices.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Devices.Entity = null;
						previousValue.User = null;
					}
					this._Devices.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Devices");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LocationPrivacy", Storage="_LocationPrivacies", ThisKey="id", OtherKey="userid")]
		public EntitySet<LocationPrivacy> LocationPrivacies
		{
			get
			{
				return this._LocationPrivacies;
			}
			set
			{
				this._LocationPrivacies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLocation", Storage="_UserLocations", ThisKey="id", OtherKey="userid")]
		public EntitySet<UserLocation> UserLocations
		{
			get
			{
				return this._UserLocations;
			}
			set
			{
				this._UserLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PhoneNumber", Storage="_PhoneNumbers", ThisKey="id", OtherKey="UserId")]
		public EntitySet<PhoneNumber> PhoneNumbers
		{
			get
			{
				return this._PhoneNumbers;
			}
			set
			{
				this._PhoneNumbers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_AuthTokens(AuthToken entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AuthTokens(AuthToken entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_LocationPrivacies(LocationPrivacy entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LocationPrivacies(LocationPrivacy entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserLocations(UserLocation entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserLocations(UserLocation entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PhoneNumbers(PhoneNumber entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PhoneNumbers(PhoneNumber entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountSettings")]
	public partial class AccountSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _accountid;
		
		private string _configkey;
		
		private string _configvalue;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnaccountidChanging(int value);
    partial void OnaccountidChanged();
    partial void OnconfigkeyChanging(string value);
    partial void OnconfigkeyChanged();
    partial void OnconfigvalueChanging(string value);
    partial void OnconfigvalueChanged();
    #endregion
		
		public AccountSetting()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accountid", DbType="Int NOT NULL")]
		public int accountid
		{
			get
			{
				return this._accountid;
			}
			set
			{
				if ((this._accountid != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnaccountidChanging(value);
					this.SendPropertyChanging();
					this._accountid = value;
					this.SendPropertyChanged("accountid");
					this.OnaccountidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_configkey", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string configkey
		{
			get
			{
				return this._configkey;
			}
			set
			{
				if ((this._configkey != value))
				{
					this.OnconfigkeyChanging(value);
					this.SendPropertyChanging();
					this._configkey = value;
					this.SendPropertyChanged("configkey");
					this.OnconfigkeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_configvalue", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string configvalue
		{
			get
			{
				return this._configvalue;
			}
			set
			{
				if ((this._configvalue != value))
				{
					this.OnconfigvalueChanging(value);
					this.SendPropertyChanging();
					this._configvalue = value;
					this.SendPropertyChanged("configvalue");
					this.OnconfigvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountSetting", Storage="_Account", ThisKey="accountid", OtherKey="id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Settings.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Settings.Add(this);
						this._accountid = value.id;
					}
					else
					{
						this._accountid = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuthTokens")]
	public partial class AuthToken : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _token;
		
		private int _userid;
		
		private System.Nullable<System.DateTime> _lastuse;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntokenChanging(string value);
    partial void OntokenChanged();
    partial void OnuseridChanging(int value);
    partial void OnuseridChanged();
    partial void OnexpiresChanging(System.Nullable<System.DateTime> value);
    partial void OnexpiresChanged();
    #endregion
		
		public AuthToken()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_token", DbType="Char(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string token
		{
			get
			{
				return this._token;
			}
			set
			{
				if ((this._token != value))
				{
					this.OntokenChanging(value);
					this.SendPropertyChanging();
					this._token = value;
					this.SendPropertyChanged("token");
					this.OntokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", DbType="Int NOT NULL")]
		public int userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastuse", DbType="DateTime")]
		public System.Nullable<System.DateTime> expires
		{
			get
			{
				return this._lastuse;
			}
			set
			{
				if ((this._lastuse != value))
				{
					this.OnexpiresChanging(value);
					this.SendPropertyChanging();
					this._lastuse = value;
					this.SendPropertyChanged("expires");
					this.OnexpiresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AuthToken", Storage="_User", ThisKey="userid", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AuthTokens.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AuthTokens.Add(this);
						this._userid = value.id;
					}
					else
					{
						this._userid = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Devices")]
	public partial class Device : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _userid;
		
		private string _name;
		
		private int _type;
		
		private System.Nullable<System.DateTime> _lastseen;
		
		private System.Nullable<System.DateTime> _lastsignin;
		
		private string _logintoken;
		
		private System.Nullable<System.DateTime> _lastaction;
		
		private EntitySet<DeviceType> _DeviceTypes;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuseridChanging(int value);
    partial void OnuseridChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndevicetypeChanging(int value);
    partial void OndevicetypeChanged();
    partial void OnlastseenChanging(System.Nullable<System.DateTime> value);
    partial void OnlastseenChanged();
    partial void OnlastsigninChanging(System.Nullable<System.DateTime> value);
    partial void OnlastsigninChanged();
    partial void OnlogintokenChanging(string value);
    partial void OnlogintokenChanged();
    partial void OnlastactionChanging(System.Nullable<System.DateTime> value);
    partial void OnlastactionChanged();
    #endregion
		
		public Device()
		{
			this._DeviceTypes = new EntitySet<DeviceType>(new Action<DeviceType>(this.attach_DeviceTypes), new Action<DeviceType>(this.detach_DeviceTypes));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", DbType="Int NOT NULL")]
		public int userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="int NOT NULL")]
		public int devicetype
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OndevicetypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("devicetype");
					this.OndevicetypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastseen", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastseen
		{
			get
			{
				return this._lastseen;
			}
			set
			{
				if ((this._lastseen != value))
				{
					this.OnlastseenChanging(value);
					this.SendPropertyChanging();
					this._lastseen = value;
					this.SendPropertyChanged("lastseen");
					this.OnlastseenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastsignin", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastsignin
		{
			get
			{
				return this._lastsignin;
			}
			set
			{
				if ((this._lastsignin != value))
				{
					this.OnlastsigninChanging(value);
					this.SendPropertyChanging();
					this._lastsignin = value;
					this.SendPropertyChanged("lastsignin");
					this.OnlastsigninChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logintoken", DbType="VarChar(50)")]
		public string logintoken
		{
			get
			{
				return this._logintoken;
			}
			set
			{
				if ((this._logintoken != value))
				{
					this.OnlogintokenChanging(value);
					this.SendPropertyChanging();
					this._logintoken = value;
					this.SendPropertyChanged("logintoken");
					this.OnlogintokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastaction", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastaction
		{
			get
			{
				return this._lastaction;
			}
			set
			{
				if ((this._lastaction != value))
				{
					this.OnlastactionChanging(value);
					this.SendPropertyChanging();
					this._lastaction = value;
					this.SendPropertyChanged("lastaction");
					this.OnlastactionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Device_DeviceType", Storage="_DeviceTypes", ThisKey="devicetype", OtherKey="Id")]
		public EntitySet<DeviceType> DeviceTypes
		{
			get
			{
				return this._DeviceTypes;
			}
			set
			{
				this._DeviceTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Device", Storage="_User", ThisKey="userid", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Devices = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Devices = this;
						this._userid = value.id;
					}
					else
					{
						this._userid = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeviceTypes(DeviceType entity)
		{
			this.SendPropertyChanging();
			entity.Device = this;
		}
		
		private void detach_DeviceTypes(DeviceType entity)
		{
			this.SendPropertyChanging();
			entity.Device = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationPrivacy")]
	public partial class LocationPrivacy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _userid;
		
		private int _locationid;
		
		private int _accountid;
		
		private EntityRef<User> _User;
		
		private EntityRef<UserLocation> _UserLocation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuseridChanging(int value);
    partial void OnuseridChanged();
    partial void OnlocationidChanging(int value);
    partial void OnlocationidChanged();
    partial void OnaccountidChanging(int value);
    partial void OnaccountidChanged();
    #endregion
		
		public LocationPrivacy()
		{
			this._User = default(EntityRef<User>);
			this._UserLocation = default(EntityRef<UserLocation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", DbType="Int NOT NULL")]
		public int userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_locationid", DbType="Int NOT NULL")]
		public int locationid
		{
			get
			{
				return this._locationid;
			}
			set
			{
				if ((this._locationid != value))
				{
					if (this._UserLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlocationidChanging(value);
					this.SendPropertyChanging();
					this._locationid = value;
					this.SendPropertyChanged("locationid");
					this.OnlocationidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accountid", DbType="Int NOT NULL")]
		public int accountid
		{
			get
			{
				return this._accountid;
			}
			set
			{
				if ((this._accountid != value))
				{
					this.OnaccountidChanging(value);
					this.SendPropertyChanging();
					this._accountid = value;
					this.SendPropertyChanged("accountid");
					this.OnaccountidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LocationPrivacy", Storage="_User", ThisKey="userid", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LocationPrivacies.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LocationPrivacies.Add(this);
						this._userid = value.id;
					}
					else
					{
						this._userid = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserLocation_LocationPrivacy", Storage="_UserLocation", ThisKey="locationid", OtherKey="id", IsForeignKey=true)]
		public UserLocation UserLocation
		{
			get
			{
				return this._UserLocation.Entity;
			}
			set
			{
				UserLocation previousValue = this._UserLocation.Entity;
				if (((previousValue != value) 
							|| (this._UserLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserLocation.Entity = null;
						previousValue.LocationPrivacies.Remove(this);
					}
					this._UserLocation.Entity = value;
					if ((value != null))
					{
						value.LocationPrivacies.Add(this);
						this._locationid = value.id;
					}
					else
					{
						this._locationid = default(int);
					}
					this.SendPropertyChanged("UserLocation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLocation")]
	public partial class UserLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _userid;
		
		private string _service;
		
		private string _identifier;
		
		private string _username;
		
		private bool _messagable;
		
		private short _priority;
		
		private EntitySet<LocationPrivacy> _LocationPrivacies;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuseridChanging(System.Nullable<int> value);
    partial void OnuseridChanged();
    partial void OnserviceChanging(string value);
    partial void OnserviceChanged();
    partial void OnidentifierChanging(string value);
    partial void OnidentifierChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnmessagableChanging(bool value);
    partial void OnmessagableChanged();
    partial void OnpriorityChanging(short value);
    partial void OnpriorityChanged();
    #endregion
		
		public UserLocation()
		{
			this._LocationPrivacies = new EntitySet<LocationPrivacy>(new Action<LocationPrivacy>(this.attach_LocationPrivacies), new Action<LocationPrivacy>(this.detach_LocationPrivacies));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", DbType="Int")]
		public System.Nullable<int> userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string service
		{
			get
			{
				return this._service;
			}
			set
			{
				if ((this._service != value))
				{
					this.OnserviceChanging(value);
					this.SendPropertyChanging();
					this._service = value;
					this.SendPropertyChanged("service");
					this.OnserviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_identifier", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string identifier
		{
			get
			{
				return this._identifier;
			}
			set
			{
				if ((this._identifier != value))
				{
					this.OnidentifierChanging(value);
					this.SendPropertyChanging();
					this._identifier = value;
					this.SendPropertyChanged("identifier");
					this.OnidentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_messagable", DbType="Bit NOT NULL")]
		public bool messagable
		{
			get
			{
				return this._messagable;
			}
			set
			{
				if ((this._messagable != value))
				{
					this.OnmessagableChanging(value);
					this.SendPropertyChanging();
					this._messagable = value;
					this.SendPropertyChanged("messagable");
					this.OnmessagableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priority", DbType="SmallInt NOT NULL")]
		public short priority
		{
			get
			{
				return this._priority;
			}
			set
			{
				if ((this._priority != value))
				{
					this.OnpriorityChanging(value);
					this.SendPropertyChanging();
					this._priority = value;
					this.SendPropertyChanged("priority");
					this.OnpriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserLocation_LocationPrivacy", Storage="_LocationPrivacies", ThisKey="id", OtherKey="locationid")]
		public EntitySet<LocationPrivacy> LocationPrivacies
		{
			get
			{
				return this._LocationPrivacies;
			}
			set
			{
				this._LocationPrivacies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLocation", Storage="_User", ThisKey="userid", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserLocations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserLocations.Add(this);
						this._userid = value.id;
					}
					else
					{
						this._userid = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LocationPrivacies(LocationPrivacy entity)
		{
			this.SendPropertyChanging();
			entity.UserLocation = this;
		}
		
		private void detach_LocationPrivacies(LocationPrivacy entity)
		{
			this.SendPropertyChanging();
			entity.UserLocation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeviceTypes")]
	public partial class DeviceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ShortName;
		
		private string _LongName;
		
		private bool _Enabled;
		
		private bool _MarketplaceInstall;
		
		private string _DownloadUrl;
		
		private double _PlatformMinVersion;
		
		private string _ProductMaker;
		
		private string _ProductUrl;
		
		private bool _RequiresCustomPush;
		
		private string _CustomPushPattern;
		
		private EntityRef<Device> _Device;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnLongNameChanging(string value);
    partial void OnLongNameChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    partial void OnMarketplaceInstallChanging(bool value);
    partial void OnMarketplaceInstallChanged();
    partial void OnDownloadUrlChanging(string value);
    partial void OnDownloadUrlChanged();
    partial void OnPlatformMinVersionChanging(double value);
    partial void OnPlatformMinVersionChanged();
    partial void OnProductMakerChanging(string value);
    partial void OnProductMakerChanged();
    partial void OnProductUrlChanging(string value);
    partial void OnProductUrlChanged();
    partial void OnRequiresCustomPushChanging(bool value);
    partial void OnRequiresCustomPushChanged();
    partial void OnCustomPushPatternChanging(string value);
    partial void OnCustomPushPatternChanged();
    #endregion
		
		public DeviceType()
		{
			this._Device = default(EntityRef<Device>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Device.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string LongName
		{
			get
			{
				return this._LongName;
			}
			set
			{
				if ((this._LongName != value))
				{
					this.OnLongNameChanging(value);
					this.SendPropertyChanging();
					this._LongName = value;
					this.SendPropertyChanged("LongName");
					this.OnLongNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarketplaceInstall", DbType="Bit NOT NULL")]
		public bool MarketplaceInstall
		{
			get
			{
				return this._MarketplaceInstall;
			}
			set
			{
				if ((this._MarketplaceInstall != value))
				{
					this.OnMarketplaceInstallChanging(value);
					this.SendPropertyChanging();
					this._MarketplaceInstall = value;
					this.SendPropertyChanged("MarketplaceInstall");
					this.OnMarketplaceInstallChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DownloadUrl", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string DownloadUrl
		{
			get
			{
				return this._DownloadUrl;
			}
			set
			{
				if ((this._DownloadUrl != value))
				{
					this.OnDownloadUrlChanging(value);
					this.SendPropertyChanging();
					this._DownloadUrl = value;
					this.SendPropertyChanged("DownloadUrl");
					this.OnDownloadUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlatformMinVersion", DbType="Float NOT NULL")]
		public double PlatformMinVersion
		{
			get
			{
				return this._PlatformMinVersion;
			}
			set
			{
				if ((this._PlatformMinVersion != value))
				{
					this.OnPlatformMinVersionChanging(value);
					this.SendPropertyChanging();
					this._PlatformMinVersion = value;
					this.SendPropertyChanged("PlatformMinVersion");
					this.OnPlatformMinVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductMaker", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ProductMaker
		{
			get
			{
				return this._ProductMaker;
			}
			set
			{
				if ((this._ProductMaker != value))
				{
					this.OnProductMakerChanging(value);
					this.SendPropertyChanging();
					this._ProductMaker = value;
					this.SendPropertyChanged("ProductMaker");
					this.OnProductMakerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductUrl", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductUrl
		{
			get
			{
				return this._ProductUrl;
			}
			set
			{
				if ((this._ProductUrl != value))
				{
					this.OnProductUrlChanging(value);
					this.SendPropertyChanging();
					this._ProductUrl = value;
					this.SendPropertyChanged("ProductUrl");
					this.OnProductUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiresCustomPush", DbType="Bit NOT NULL")]
		public bool RequiresCustomPush
		{
			get
			{
				return this._RequiresCustomPush;
			}
			set
			{
				if ((this._RequiresCustomPush != value))
				{
					this.OnRequiresCustomPushChanging(value);
					this.SendPropertyChanging();
					this._RequiresCustomPush = value;
					this.SendPropertyChanged("RequiresCustomPush");
					this.OnRequiresCustomPushChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomPushPattern", DbType="VarChar(20)")]
		public string CustomPushPattern
		{
			get
			{
				return this._CustomPushPattern;
			}
			set
			{
				if ((this._CustomPushPattern != value))
				{
					this.OnCustomPushPatternChanging(value);
					this.SendPropertyChanging();
					this._CustomPushPattern = value;
					this.SendPropertyChanged("CustomPushPattern");
					this.OnCustomPushPatternChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Device_DeviceType", Storage="_Device", ThisKey="Id", OtherKey="devicetype", IsForeignKey=true)]
		public Device Device
		{
			get
			{
				return this._Device.Entity;
			}
			set
			{
				Device previousValue = this._Device.Entity;
				if (((previousValue != value) 
							|| (this._Device.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Device.Entity = null;
						previousValue.DeviceTypes.Remove(this);
					}
					this._Device.Entity = value;
					if ((value != null))
					{
						value.DeviceTypes.Add(this);
						this._Id = value.devicetype;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("Device");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Friends")]
	public partial class Friend
	{
		
		private int _id;
		
		private int _userid;
		
		private int _friendid;
		
		private string _displayname;
		
		private System.Nullable<System.DateTime> _Timestamp;
		
		public Friend()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", DbType="Int NOT NULL")]
		public int userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this._userid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_friendid", DbType="Int NOT NULL")]
		public int friendid
		{
			get
			{
				return this._friendid;
			}
			set
			{
				if ((this._friendid != value))
				{
					this._friendid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_displayname", DbType="VarChar(50)")]
		public string displayname
		{
			get
			{
				return this._displayname;
			}
			set
			{
				if ((this._displayname != value))
				{
					this._displayname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="Date")]
		public System.Nullable<System.DateTime> Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this._Timestamp = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhoneNumbers")]
	public partial class PhoneNumber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private string _PhoneType;
		
		private ushort _CountryCode;
		
		private string _PhoneNumber1;
		
		private System.Nullable<ushort> _Extension;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPhoneTypeChanging(string value);
    partial void OnPhoneTypeChanged();
    partial void OnCountryCodeChanging(ushort value);
    partial void OnCountryCodeChanged();
    partial void OnSubscriberNumberChanging(string value);
    partial void OnSubscriberNumberChanged();
    partial void OnExtensionChanging(System.Nullable<ushort> value);
    partial void OnExtensionChanged();
    #endregion
		
		public PhoneNumber()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneType", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string PhoneType
		{
			get
			{
				return this._PhoneType;
			}
			set
			{
				if ((this._PhoneType != value))
				{
					this.OnPhoneTypeChanging(value);
					this.SendPropertyChanging();
					this._PhoneType = value;
					this.SendPropertyChanged("PhoneType");
					this.OnPhoneTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCode", DbType="SmallInt NOT NULL")]
		public ushort CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PhoneNumber", Storage="_PhoneNumber1", DbType="VarChar(14) NOT NULL", CanBeNull=false)]
		public string SubscriberNumber
		{
			get
			{
				return this._PhoneNumber1;
			}
			set
			{
				if ((this._PhoneNumber1 != value))
				{
					this.OnSubscriberNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber1 = value;
					this.SendPropertyChanged("SubscriberNumber");
					this.OnSubscriberNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Extension", DbType="SmallInt")]
		public System.Nullable<ushort> Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this.OnExtensionChanging(value);
					this.SendPropertyChanging();
					this._Extension = value;
					this.SendPropertyChanged("Extension");
					this.OnExtensionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PhoneNumber", Storage="_User", ThisKey="UserId", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PhoneNumbers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PhoneNumbers.Add(this);
						this._UserId = value.id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
